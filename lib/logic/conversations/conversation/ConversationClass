  class ConversationLogic {

     static String  _getLastOnline(String lastOnline) {
    String currentDate =
        formatDate(DateTime.now().toLocal(), [dd, '.', mm, '.', yy]);
    var date = lastOnline.split(" ");

    if (lastOnline.startsWith(currentDate)) {
      return "last seen today at " + date[1].trim();
    } else {
      return "last seen on " + date[0].trim();
    }
  }

  static Future<void> addConversation() async {
    List<ContactUser> conversations = [];

    final QuerySnapshot conversationsQuery = await FirebaseFirestore.instance
        .collection(FirebaseAuth.instance.currentUser.displayName)
        .doc("Conversations")
        .collection("Conversations_Collection")
        .get();
    for (int i = 0; i < conversationsQuery.docs.length; i++) {
      final DocumentSnapshot userInfo = await FirebaseFirestore.instance
          .collection(conversationsQuery.docs[i].id)
          .doc("Information")
          .get();
      conversations.add(
        ContactUser(
            name:
                getContactName(ContactUser(id: conversationsQuery.docs[i].id)),
            id: conversationsQuery.docs[i].id,
            imageUrl: userInfo.get("imageUrl"),
            lastOnline: userInfo.get("lastOnline"),
            description: userInfo.get("description")),
      );
      setState(() {
        final String encodedData = ContactUser.encode(conversations);

        //Speicher Pfad
        LocalData.putString("conversation_list", encodedData);
      });
    }
  }

  static Future<void> addMessage(Message message) async {
    String encryptedTextSender = Encryption().encrypt(message.messageText,
        Encryption().parsePublicKeyFromPem(LocalData.getString("publicKey")));

    final String messagesString =
        LocalData.getString("conversation_" + widget.contactUser.id);

    List<Message> messages =
        LocalData.exitsString("conversation_" + widget.contactUser.id)
            ? Message.decode(messagesString)
            : [];

    messages.add(
      Message(
        type: message.type,
        time: message.time,
        status: message.status,
        id: (LocalData.exitsString("conversation_" + widget.contactUser.id)
                ? Message.decode(LocalData.getString(
                        "conversation_" + widget.contactUser.id))
                    .length
                : 0) +
            1,
        messageText: encryptedTextSender,
        sender: FirebaseAuth.instance.currentUser.displayName,
        receiver: widget.contactUser.id,
      ),
    );
    setState(() {
      final String encodedData = Message.encode(messages);
      LocalData.putString("conversation_" + widget.contactUser.id, encodedData);
    });
  }

  static Future<void> updateConversations() async {
    final QuerySnapshot conversationsQuery = await FirebaseFirestore.instance
        .collection(FirebaseAuth.instance.currentUser.displayName)
        .doc("Conversations")
        .collection("Conversations_Collection")
        .get();
    if (conversationsQuery.size != 0) {
      for (int i = 0; i < conversationsQuery.docs.length; i++) {
        QuerySnapshot querySnapshot = await FirebaseFirestore.instance
            .collection(conversationsQuery.docs[i].id)
            .doc("Conversations")
            .collection("Conversations_Collection")
            .doc(FirebaseAuth.instance.currentUser.displayName)
            .collection("Sent_Messages")
            .orderBy("id", descending: false)
            .get();

        for (int i1 = 0; i1 < querySnapshot.size; i1++) {
          FirebaseFirestore.instance
              .collection(conversationsQuery.docs[i].id)
              .doc("Conversations")
              .collection("Conversations_Collection")
              .doc(FirebaseAuth.instance.currentUser.displayName)
              .collection("Sent_Messages")
              .doc(querySnapshot.docs[i1].id)
              .update({
            'status': "received",
          }).asStream();
        }

        final String messagesString = LocalData.getString(
            "conversation_" + conversationsQuery.docs[i].id);

        List<Message> messages = LocalData.exitsString(
                "conversation_" + conversationsQuery.docs[i].id)
            ? Message.decode(messagesString)
            : [];

        final QuerySnapshot messagesQuery = await FirebaseFirestore.instance
            .collection(FirebaseAuth.instance.currentUser.displayName)
            .doc("Conversations")
            .collection("Conversations_Collection")
            .doc(conversationsQuery.docs[i].id)
            .collection("Messages")
            .orderBy("id", descending: false)
            .get();

        for (int i1 = 0; i1 < messagesQuery.docs.length; i1++) {
          messages.add(
            Message(
                time: messagesQuery.docs[i1].get("time"),
                type: messagesQuery.docs[i1].get("type"),
                messageText: messagesQuery.docs[i1].get("message"),
                sender: messagesQuery.docs[i1].get("sender"),
                receiver: messagesQuery.docs[i1].get("receiver"),
                status: messagesQuery.docs[i1].get("status")),
          );
          await FirebaseFirestore.instance
              .collection(FirebaseAuth.instance.currentUser.displayName)
              .doc("Conversations")
              .collection("Conversations_Collection")
              .doc(conversationsQuery.docs[i].id)
              .collection("Messages")
              .doc(messagesQuery.docs[i1].id)
              .delete();
          final String encodedData = Message.encode(messages);

          //Speicher Pfad
          LocalData.putString(
              "conversation_" + conversationsQuery.docs[i].id, encodedData);
        }
      }
    }
  }

  static Future<void> updateContactList() async {
    List<ContactUser> conversations = [];
    final QuerySnapshot conversationsQuery = await FirebaseFirestore.instance
        .collection(FirebaseAuth.instance.currentUser.displayName)
        .doc("Conversations")
        .collection("Conversations_Collection")
        .get();
    for (int i = 0; i < conversationsQuery.docs.length; i++) {
      final DocumentSnapshot userInfo = await FirebaseFirestore.instance
          .collection(conversationsQuery.docs[i].id)
          .doc("Information")
          .get();

      conversations.add(
        ContactUser(
            name:
                getContactName(ContactUser(id: conversationsQuery.docs[i].id)),
            id: conversationsQuery.docs[i].id,
            imageUrl: userInfo.get("imageUrl"),
            lastOnline: userInfo.get("lastOnline"),
            description: userInfo.get("description")),
      );
      if (conversations.length == conversationsQuery.docs.length) {
        final String encodedData = ContactUser.encode(conversations);

        //Speicher Pfa
        setState(() {
          LocalData.putString("conversation_list", encodedData);
          if (widget.updateParent != null) {
            widget.updateParent();
          }
        });
      }
    }
  }

  

  static void fetchNotifications() async {
    final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;

    void sendTokenToServer(String fcmToken) {
      print('Token: $fcmToken');
      // send key to your server to allow server to use
      // this token to send push notifications
    }

    _firebaseMessaging.onTokenRefresh.listen(sendTokenToServer);
    _firebaseMessaging.getToken();

    FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
      if (message.notification != null) {
        if (mounted) {
          Timer(Duration(seconds: 2), () => setState(() {}));
        }
      }
    });
  }
}